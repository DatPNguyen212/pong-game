{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["const playerScore = document.querySelector(\"[data-player-score]\");\nconst computerScore = document.querySelector(\"[data-computer-score]\");\nconst playerBar = document.querySelector(\"[data-player-bar]\");\nconst computerBar = document.querySelector(\"[data-computer-bar]\");\nconst ball = document.querySelector(\"[data-ball]\");\nconst body = document.querySelector(\"body\");\nlet bodySizeAndPosition = body.getBoundingClientRect();\nconst playerWinContainer = document.querySelector(\"[data-player-win-container]\");\nconst computerWinContainer = document.querySelector(\"[data-computer-win-container]\");\nconst overlay = document.querySelector(\"[data-overlay]\");\nconst allPopupPlayerScores = document.querySelectorAll(\"[data-popup-player-score]\");\nconst allPopupComputerScores = document.querySelectorAll(\"[data-popup-computer-score]\");\nconst allPlayAgainButton = document.querySelectorAll(\"[data-play-again-button]\");\nconst allInfiniteModeButton = document.querySelectorAll(\"[data-infinite-button]\");\nconst infiniteModeLabel = document.querySelector(\"[data-infinite-mode-label]\");\nconst infiniteModeInput = document.querySelector(\"#infinite-mode-input\");\nlet playerSizeAndPosition = playerBar.getBoundingClientRect();\nlet computerSizeAndPosition = computerBar.getBoundingClientRect();\nlet playerBarCenterX = playerSizeAndPosition.width / 2 + playerSizeAndPosition.x;\nlet playerBarCenterY = playerSizeAndPosition.height / 2 + playerSizeAndPosition.y;\nlet playerBarHitBoxX = playerSizeAndPosition.x + playerSizeAndPosition.width;\nlet computerBarCenterX = computerSizeAndPosition.x + computerSizeAndPosition.width / 2;\nlet computerBarCenterY = computerSizeAndPosition.y + computerSizeAndPosition.height / 2;\ncomputerBar.style.top = (computerSizeAndPosition.y - computerSizeAndPosition.height / 2).toString() + \"px\";\n// topplayerHitBoxYTop    playerPostion.top to playerCenterY\n// topPlayerHitBoxBottom playerCenterY to playerPositionBottom\nlet ballSizeAndPosition = ball.getBoundingClientRect();\nlet ballCenterX = ballSizeAndPosition.width / 2 + ballSizeAndPosition.x;\nlet ballCenterY = ballSizeAndPosition.height / 2 + ballSizeAndPosition.y;\nlet ballCurrentDirection;\nlet isBallHitByPlayer;\nlet isBallHitByComputer;\n// distance and interval for ball\nlet pxDistanceBallMove = 3;\nlet setIntervalNumberMs = 15;\n// distance and interval for computer bar\nlet pxDistanceComputerMove = 6;\nlet setTimeoutComputer = 0.5;\nlet moveTimeoutComputerNorth;\nlet moveTimeoutComputerSouth;\nlet playerScoreNum = 0;\nlet computerScoreNum = 0;\nconst numberOfRoundsToWin = 5;\nlet isPlayerWin;\nlet isInfiniteMode = false;\nconst intervalIds = [];\nconst timeoutIds = [];\nallPlayAgainButton.forEach((playAgainButton)=>{\n    playAgainButton.addEventListener(\"click\", (event)=>{\n        playerWinContainer.classList.remove(\"active\");\n        computerWinContainer.classList.remove(\"active\");\n        overlay.classList.remove(\"active\");\n        isInfiniteMode = false;\n        gameRestart();\n    });\n});\nallInfiniteModeButton.forEach((infiniteButton)=>{\n    infiniteButton.addEventListener(\"click\", (event)=>{\n        playerWinContainer.classList.remove(\"active\");\n        computerWinContainer.classList.remove(\"active\");\n        overlay.classList.remove(\"active\");\n        isInfiniteMode = true;\n        updateInfiniteModeInputLabel();\n        gameInit();\n    });\n});\ninfiniteModeInput.addEventListener(\"change\", (event)=>{\n    if (event.target.checked) {\n        isInfiniteMode = true;\n        infiniteModeLabel.textContent = \"Infinite Mode\";\n    } else if (!event.target.checked) {\n        isInfiniteMode = false;\n        infiniteModeLabel.textContent = \"First to 5pts\";\n        if (playerScoreNum >= numberOfRoundsToWin || computerScoreNum >= numberOfRoundsToWin) gameRestart();\n    }\n});\nbody.addEventListener(\"mousemove\", (event)=>{\n    const mouseY = event.pageY;\n    playerBar.style.top = mouseY.toString() + \"px\";\n    updatePlayerBarPosition();\n});\ngameInit();\nfunction generateBallAtRandomY() {\n    pxDistanceBallMove = 3;\n    pxDistanceComputerMove = 6;\n    const randomY = Math.floor(Math.random() * (bodySizeAndPosition.height - ballSizeAndPosition.height));\n    ball.style.left = (bodySizeAndPosition.width / 2 - ballSizeAndPosition.width / 2).toString() + \"px\";\n    // console.log(getComputedStyle(ball).getPropertyValue('left'))\n    ball.style.top = randomY.toString() + \"px\";\n    computerBar.style.top = (bodySizeAndPosition.height / 2 - computerSizeAndPosition.height / 2).toString() + \"px\";\n}\nfunction moveBallFromStartingPosition() {\n    updateBallPosition();\n    const randomTopOrBottom = Math.floor(Math.random() * 2) + 1;\n    if (randomTopOrBottom === 1) {\n        const startingPositionIntervalTop = setInterval(moveBallNorthWest, setIntervalNumberMs);\n        ballCurrentDirection = \"left\";\n        intervalIds.push(startingPositionIntervalTop);\n    } else if (randomTopOrBottom === 2) {\n        const startingPositionIntervalBottom = setInterval(moveBallSouthWest, setIntervalNumberMs);\n        ballCurrentDirection = \"left\";\n        intervalIds.push(startingPositionIntervalBottom);\n    }\n// console.log(intervalIds)\n}\nfunction moveBallNorthWest() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x - pxDistanceBallMove).toString() + \"px\";\n    ball.style.top = (ballSizeAndPosition.y - pxDistanceBallMove).toString() + \"px\";\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction moveBallSouthWest() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x - pxDistanceBallMove).toString() + \"px\";\n    ball.style.top = (ballSizeAndPosition.y + pxDistanceBallMove).toString() + \"px\";\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction moveBallNorthEast() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x + pxDistanceBallMove).toString() + \"px\";\n    ball.style.top = (ballSizeAndPosition.y - pxDistanceBallMove).toString() + \"px\";\n    // console.log(ballSizeAndPosition.x, ballSizeAndPosition.y)\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction moveBallSouthEast() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x + pxDistanceBallMove).toString() + \"px\";\n    ball.style.top = (ballSizeAndPosition.y + pxDistanceBallMove).toString() + \"px\";\n    // console.log(ballSizeAndPosition.x, ballSizeAndPosition.y)\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction moveBallEast() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x + pxDistanceBallMove).toString() + \"px\";\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction moveBallWest() {\n    updateBallPosition();\n    ball.style.left = (ballSizeAndPosition.x - pxDistanceBallMove).toString() + \"px\";\n    moveComputerBar();\n    ifBallCollideLogic();\n}\nfunction updateBallPosition() {\n    ballSizeAndPosition = ball.getBoundingClientRect();\n    ballCenterX = ballSizeAndPosition.width / 2 + ballSizeAndPosition.x;\n    ballCenterY = ballSizeAndPosition.height / 2 + ballSizeAndPosition.y;\n}\nfunction updatePlayerBarPosition() {\n    playerSizeAndPosition = playerBar.getBoundingClientRect();\n    playerBarCenterX = playerSizeAndPosition.width / 2 + playerSizeAndPosition.x;\n    playerBarCenterY = playerSizeAndPosition.height / 2 + playerSizeAndPosition.y;\n    playerBarHitBoxX = playerSizeAndPosition.x + playerSizeAndPosition.width;\n}\nfunction ifBallCollideLogic() {\n    updateBallPosition();\n    updateBodySizeAndPosition();\n    if (ballSizeAndPosition.x <= playerBarHitBoxX && ballCenterY >= playerSizeAndPosition.y && ballCenterY <= playerSizeAndPosition.bottom) {\n        isBallHitByPlayer = true;\n        isBallHitByComputer = false;\n        ballCurrentDirection = \"right\";\n        // console.log('hit')\n        increaseBallSpeed();\n        ballBounceFromPlayer();\n    } else if (ballSizeAndPosition.y <= bodySizeAndPosition.y) {\n        if (ballCurrentDirection === \"right\") {\n            clearAllInterval();\n            const intervalBounceTopBody1 = setInterval(moveBallSouthEast, setIntervalNumberMs);\n            intervalIds.push(intervalBounceTopBody1);\n        } else if (ballCurrentDirection === \"left\") {\n            clearAllInterval();\n            const intervalBounceTopBody2 = setInterval(moveBallSouthWest, setIntervalNumberMs);\n            intervalIds.push(intervalBounceTopBody2);\n        }\n    } else if (ballSizeAndPosition.bottom >= bodySizeAndPosition.bottom) {\n        if (ballCurrentDirection === \"right\") {\n            clearAllInterval();\n            const intervalBounceBottomBody1 = setInterval(moveBallNorthEast, setIntervalNumberMs);\n            intervalIds.push(intervalBounceBottomBody1);\n        } else if (ballCurrentDirection === \"left\") {\n            clearAllInterval();\n            const intervalBounceBottomBody2 = setInterval(moveBallNorthWest, setIntervalNumberMs);\n            intervalIds.push(intervalBounceBottomBody2);\n        }\n    } else if (ballSizeAndPosition.right >= computerSizeAndPosition.left && ballCenterY >= computerSizeAndPosition.y && ballCenterY <= computerSizeAndPosition.bottom) {\n        isBallHitByComputer = true;\n        isBallHitByPlayer = false;\n        ballCurrentDirection = \"left\";\n        // console.log('Collided with computer bar')\n        increaseBallSpeed();\n        ballBounceFromComputer();\n    } else if (ballSizeAndPosition.left <= bodySizeAndPosition.left) {\n        computerScoreNum += 1;\n        updateScoreBoard();\n        generateBallAtRandomY();\n    } else if (ballSizeAndPosition.right >= bodySizeAndPosition.right) {\n        playerScoreNum += 1;\n        updateScoreBoard();\n        generateBallAtRandomY();\n    }\n}\nfunction updateScoreBoard() {\n    playerScore.textContent = playerScoreNum.toString();\n    computerScore.textContent = computerScoreNum.toString();\n    allPopupPlayerScores.forEach((playerElement)=>{\n        playerElement.textContent = playerScoreNum.toString();\n    });\n    allPopupComputerScores.forEach((computerElement)=>{\n        computerElement.textContent = computerScoreNum.toString();\n    });\n    if (isInfiniteMode === false) checkPlayerWin();\n}\nfunction ballBounceFromPlayer() {\n    clearAllInterval();\n    // console.log('bouncing')\n    if (ballCenterY < playerBarCenterY) {\n        const intervalBouncePlayer1 = setInterval(moveBallNorthEast, setIntervalNumberMs);\n        intervalIds.push(intervalBouncePlayer1);\n    // console.log('move ball north east')\n    } else if (ballCenterY > playerBarCenterY) {\n        const intervalBouncePlayer2 = setInterval(moveBallSouthEast, setIntervalNumberMs);\n        intervalIds.push(intervalBouncePlayer2);\n    // console.log('move ball south east')\n    } else if (ballCenterY === playerBarCenterY) {\n        const intervalBouncePlayer3 = setInterval(moveBallEast, setIntervalNumberMs);\n        intervalIds.push(intervalBouncePlayer3);\n    // console.log('move ball east')\n    }\n}\nfunction ballBounceFromComputer() {\n    clearAllInterval();\n    // console.log('bouncing')\n    if (ballCenterY < computerBarCenterY) {\n        const intervalBounceComputer1 = setInterval(moveBallNorthWest, setIntervalNumberMs);\n        intervalIds.push(intervalBounceComputer1);\n    } else if (ballCenterY > computerBarCenterY) {\n        const intervalBounceComputer2 = setInterval(moveBallSouthWest, setIntervalNumberMs);\n        intervalIds.push(intervalBounceComputer2);\n    } else if (ballCenterY === computerBarCenterY) {\n        const intervalBounceComputer3 = setInterval(moveBallWest, setIntervalNumberMs);\n        intervalIds.push(intervalBounceComputer3);\n    }\n}\nfunction clearAllInterval() {\n    intervalIds.forEach((interval)=>{\n        clearInterval(interval);\n    });\n    intervalIds.splice(0, intervalIds.length);\n// console.log(intervalIds)\n}\nfunction moveComputerBar() {\n    updateBallPosition();\n    updateComputerBarPosition();\n    // console.log(timeoutIds)\n    if (ballCenterY < computerBarCenterY) {\n        moveTimeoutComputerNorth = setTimeout(moveComputerBarNorth, setTimeoutComputer);\n        timeoutIds.push(moveTimeoutComputerNorth);\n    // console.log(computerSizeAndPosition.y)\n    // console.log('computer bar moving top')\n    } else if (ballCenterY > computerBarCenterY) {\n        moveTimeoutComputerSouth = setTimeout(moveComputerBarSouth, setTimeoutComputer);\n        timeoutIds.push(moveTimeoutComputerSouth);\n    // console.log(computerSizeAndPosition.y)\n    // console.log('computer bar moving bottom')\n    } else clearAllTimeout();\n}\nfunction moveComputerBarNorth() {\n    updateComputerBarPosition();\n    computerBar.style.top = (computerSizeAndPosition.y - pxDistanceComputerMove).toString() + \"px\";\n}\nfunction moveComputerBarSouth() {\n    updateComputerBarPosition();\n    computerBar.style.top = (computerSizeAndPosition.y + pxDistanceComputerMove).toString() + \"px\";\n}\nfunction clearAllTimeout() {\n    timeoutIds.forEach((timeout)=>{\n        clearTimeout(timeout);\n    });\n    timeoutIds.splice(0, timeoutIds.length);\n}\nfunction updateComputerBarPosition() {\n    computerSizeAndPosition = computerBar.getBoundingClientRect();\n    computerBarCenterX = computerSizeAndPosition.x + computerSizeAndPosition.width / 2;\n    computerBarCenterY = computerSizeAndPosition.y + computerSizeAndPosition.height / 2;\n}\nfunction increaseBallSpeed() {\n    pxDistanceBallMove += 0.5;\n    if (pxDistanceComputerMove < 8) pxDistanceComputerMove += 0.3;\n}\nfunction checkPlayerWin() {\n    console.log(playerScoreNum, computerScoreNum);\n    if (playerScoreNum === numberOfRoundsToWin) {\n        isPlayerWin = true;\n        stopAllMovement();\n        playerWinContainer.classList.add(\"active\");\n        overlay.classList.add(\"active\");\n        infiniteModeInput.disabled = true;\n    } else if (computerScoreNum === numberOfRoundsToWin) {\n        console.log(\"computer wins\");\n        isPlayerWin = false;\n        stopAllMovement();\n        computerWinContainer.classList.add(\"active\");\n        overlay.classList.add(\"active\");\n        infiniteModeInput.disabled = true;\n    }\n}\nfunction resetGameState() {\n    stopAllMovement();\n    ballCurrentDirection = undefined;\n    isBallHitByPlayer = undefined;\n    isBallHitByComputer = undefined;\n    // distance and interval for ball\n    pxDistanceBallMove = 3;\n    setIntervalNumberMs = 15;\n    // distance and interval for computer bar\n    pxDistanceComputerMove = 6;\n    setTimeoutComputer = 0.5;\n    moveTimeoutComputerNorth = undefined;\n    moveTimeoutComputerSouth = undefined;\n    playerScoreNum = 0;\n    computerScoreNum = 0;\n    isPlayerWin = undefined;\n    isInfiniteMode = false;\n    updateScoreBoard();\n    updateInfiniteModeInputLabel();\n}\nfunction stopAllMovement() {\n    clearAllInterval();\n    clearAllTimeout();\n}\nfunction updateBodySizeAndPosition() {\n    bodySizeAndPosition = body.getBoundingClientRect();\n}\nfunction gameInit() {\n    generateBallAtRandomY();\n    moveBallFromStartingPosition();\n}\nfunction gameRestart() {\n    resetGameState();\n    generateBallAtRandomY();\n    moveBallFromStartingPosition();\n}\nfunction updateInfiniteModeInputLabel() {\n    infiniteModeInput.removeAttribute(\"disabled\");\n    if (!isInfiniteMode) {\n        infiniteModeLabel.textContent = \"First to 5pts\";\n        infiniteModeInput.checked = false;\n    } else {\n        infiniteModeLabel.textContent = \"Infinite Mode\";\n        infiniteModeInput.checked = true;\n    }\n}\n\n//# sourceMappingURL=index.ed741662.js.map\n","const playerScore = document.querySelector('[data-player-score]')\r\nconst computerScore = document.querySelector('[data-computer-score]')\r\n\r\nconst playerBar = document.querySelector('[data-player-bar]')\r\nconst computerBar = document.querySelector('[data-computer-bar]')\r\n\r\nconst ball = document.querySelector('[data-ball]')\r\n\r\nconst body = document.querySelector('body')\r\nlet bodySizeAndPosition = body.getBoundingClientRect()\r\n\r\nconst playerWinContainer = document.querySelector('[data-player-win-container]')\r\nconst computerWinContainer = document.querySelector(\r\n  '[data-computer-win-container]'\r\n)\r\nconst overlay = document.querySelector('[data-overlay]')\r\n\r\nconst allPopupPlayerScores = document.querySelectorAll(\r\n  '[data-popup-player-score]'\r\n)\r\nconst allPopupComputerScores = document.querySelectorAll(\r\n  '[data-popup-computer-score]'\r\n)\r\n\r\nconst allPlayAgainButton = document.querySelectorAll('[data-play-again-button]')\r\nconst allInfiniteModeButton = document.querySelectorAll(\r\n  '[data-infinite-button]'\r\n)\r\n\r\nconst infiniteModeLabel = document.querySelector('[data-infinite-mode-label]')\r\nconst infiniteModeInput = document.querySelector('#infinite-mode-input')\r\n\r\nlet playerSizeAndPosition = playerBar.getBoundingClientRect()\r\nlet computerSizeAndPosition = computerBar.getBoundingClientRect()\r\n\r\nlet playerBarCenterX = playerSizeAndPosition.width / 2 + playerSizeAndPosition.x\r\n\r\nlet playerBarCenterY =\r\n  playerSizeAndPosition.height / 2 + playerSizeAndPosition.y\r\n\r\nlet playerBarHitBoxX = playerSizeAndPosition.x + playerSizeAndPosition.width\r\n\r\nlet computerBarCenterX =\r\n  computerSizeAndPosition.x + computerSizeAndPosition.width / 2\r\nlet computerBarCenterY =\r\n  computerSizeAndPosition.y + computerSizeAndPosition.height / 2\r\n\r\ncomputerBar.style.top =\r\n  (computerSizeAndPosition.y - computerSizeAndPosition.height / 2).toString() +\r\n  'px'\r\n\r\n// topplayerHitBoxYTop    playerPostion.top to playerCenterY\r\n// topPlayerHitBoxBottom playerCenterY to playerPositionBottom\r\n\r\nlet ballSizeAndPosition = ball.getBoundingClientRect()\r\n\r\nlet ballCenterX = ballSizeAndPosition.width / 2 + ballSizeAndPosition.x\r\nlet ballCenterY = ballSizeAndPosition.height / 2 + ballSizeAndPosition.y\r\n\r\nlet ballCurrentDirection\r\nlet isBallHitByPlayer\r\nlet isBallHitByComputer\r\n\r\n// distance and interval for ball\r\nlet pxDistanceBallMove = 3\r\nlet setIntervalNumberMs = 15\r\n\r\n// distance and interval for computer bar\r\nlet pxDistanceComputerMove = 6\r\nlet setTimeoutComputer = 0.5\r\n\r\nlet moveTimeoutComputerNorth\r\nlet moveTimeoutComputerSouth\r\n\r\nlet playerScoreNum = 0\r\nlet computerScoreNum = 0\r\n\r\nconst numberOfRoundsToWin = 5\r\nlet isPlayerWin\r\n\r\nlet isInfiniteMode = false\r\n\r\nconst intervalIds = []\r\nconst timeoutIds = []\r\n\r\nallPlayAgainButton.forEach((playAgainButton) => {\r\n  playAgainButton.addEventListener('click', (event) => {\r\n    playerWinContainer.classList.remove('active')\r\n    computerWinContainer.classList.remove('active')\r\n    overlay.classList.remove('active')\r\n    isInfiniteMode = false\r\n    gameRestart()\r\n  })\r\n})\r\n\r\nallInfiniteModeButton.forEach((infiniteButton) => {\r\n  infiniteButton.addEventListener('click', (event) => {\r\n    playerWinContainer.classList.remove('active')\r\n    computerWinContainer.classList.remove('active')\r\n    overlay.classList.remove('active')\r\n    isInfiniteMode = true\r\n    updateInfiniteModeInputLabel()\r\n    gameInit()\r\n  })\r\n})\r\n\r\ninfiniteModeInput.addEventListener('change', (event) => {\r\n  if (event.target.checked) {\r\n    isInfiniteMode = true\r\n    infiniteModeLabel.textContent = 'Infinite Mode'\r\n  } else if (!event.target.checked) {\r\n    isInfiniteMode = false\r\n    infiniteModeLabel.textContent = 'First to 5pts'\r\n    if (\r\n      playerScoreNum >= numberOfRoundsToWin ||\r\n      computerScoreNum >= numberOfRoundsToWin\r\n    ) {\r\n      gameRestart()\r\n    }\r\n  }\r\n})\r\n\r\nbody.addEventListener('mousemove', (event) => {\r\n  const mouseY = event.pageY\r\n  playerBar.style.top = mouseY.toString() + 'px'\r\n\r\n  updatePlayerBarPosition()\r\n})\r\n\r\ngameInit()\r\n\r\nfunction generateBallAtRandomY() {\r\n  pxDistanceBallMove = 3\r\n  pxDistanceComputerMove = 6\r\n  const randomY = Math.floor(\r\n    Math.random() * (bodySizeAndPosition.height - ballSizeAndPosition.height)\r\n  )\r\n\r\n  ball.style.left =\r\n    (bodySizeAndPosition.width / 2 - ballSizeAndPosition.width / 2).toString() +\r\n    'px'\r\n\r\n  // console.log(getComputedStyle(ball).getPropertyValue('left'))\r\n\r\n  ball.style.top = randomY.toString() + 'px'\r\n\r\n  computerBar.style.top =\r\n    (\r\n      bodySizeAndPosition.height / 2 -\r\n      computerSizeAndPosition.height / 2\r\n    ).toString() + 'px'\r\n}\r\n\r\nfunction moveBallFromStartingPosition() {\r\n  updateBallPosition()\r\n\r\n  const randomTopOrBottom = Math.floor(Math.random() * 2) + 1\r\n\r\n  if (randomTopOrBottom === 1) {\r\n    const startingPositionIntervalTop = setInterval(\r\n      moveBallNorthWest,\r\n      setIntervalNumberMs\r\n    )\r\n    ballCurrentDirection = 'left'\r\n\r\n    intervalIds.push(startingPositionIntervalTop)\r\n  } else if (randomTopOrBottom === 2) {\r\n    const startingPositionIntervalBottom = setInterval(\r\n      moveBallSouthWest,\r\n      setIntervalNumberMs\r\n    )\r\n\r\n    ballCurrentDirection = 'left'\r\n    intervalIds.push(startingPositionIntervalBottom)\r\n  }\r\n\r\n  // console.log(intervalIds)\r\n}\r\n\r\nfunction moveBallNorthWest() {\r\n  updateBallPosition()\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x - pxDistanceBallMove).toString() + 'px'\r\n\r\n  ball.style.top =\r\n    (ballSizeAndPosition.y - pxDistanceBallMove).toString() + 'px'\r\n\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\nfunction moveBallSouthWest() {\r\n  updateBallPosition()\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x - pxDistanceBallMove).toString() + 'px'\r\n\r\n  ball.style.top =\r\n    (ballSizeAndPosition.y + pxDistanceBallMove).toString() + 'px'\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\n\r\nfunction moveBallNorthEast() {\r\n  updateBallPosition()\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x + pxDistanceBallMove).toString() + 'px'\r\n\r\n  ball.style.top =\r\n    (ballSizeAndPosition.y - pxDistanceBallMove).toString() + 'px'\r\n\r\n  // console.log(ballSizeAndPosition.x, ballSizeAndPosition.y)\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\nfunction moveBallSouthEast() {\r\n  updateBallPosition()\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x + pxDistanceBallMove).toString() + 'px'\r\n\r\n  ball.style.top =\r\n    (ballSizeAndPosition.y + pxDistanceBallMove).toString() + 'px'\r\n  // console.log(ballSizeAndPosition.x, ballSizeAndPosition.y)\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\n\r\nfunction moveBallEast() {\r\n  updateBallPosition()\r\n\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x + pxDistanceBallMove).toString() + 'px'\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\n\r\nfunction moveBallWest() {\r\n  updateBallPosition()\r\n\r\n  ball.style.left =\r\n    (ballSizeAndPosition.x - pxDistanceBallMove).toString() + 'px'\r\n  moveComputerBar()\r\n  ifBallCollideLogic()\r\n}\r\n\r\nfunction updateBallPosition() {\r\n  ballSizeAndPosition = ball.getBoundingClientRect()\r\n\r\n  ballCenterX = ballSizeAndPosition.width / 2 + ballSizeAndPosition.x\r\n  ballCenterY = ballSizeAndPosition.height / 2 + ballSizeAndPosition.y\r\n}\r\n\r\nfunction updatePlayerBarPosition() {\r\n  playerSizeAndPosition = playerBar.getBoundingClientRect()\r\n\r\n  playerBarCenterX = playerSizeAndPosition.width / 2 + playerSizeAndPosition.x\r\n\r\n  playerBarCenterY = playerSizeAndPosition.height / 2 + playerSizeAndPosition.y\r\n\r\n  playerBarHitBoxX = playerSizeAndPosition.x + playerSizeAndPosition.width\r\n}\r\n\r\nfunction ifBallCollideLogic() {\r\n  updateBallPosition()\r\n  updateBodySizeAndPosition()\r\n\r\n  if (\r\n    ballSizeAndPosition.x <= playerBarHitBoxX &&\r\n    ballCenterY >= playerSizeAndPosition.y &&\r\n    ballCenterY <= playerSizeAndPosition.bottom\r\n  ) {\r\n    isBallHitByPlayer = true\r\n    isBallHitByComputer = false\r\n    ballCurrentDirection = 'right'\r\n\r\n    // console.log('hit')\r\n    increaseBallSpeed()\r\n    ballBounceFromPlayer()\r\n  } else if (ballSizeAndPosition.y <= bodySizeAndPosition.y) {\r\n    if (ballCurrentDirection === 'right') {\r\n      clearAllInterval()\r\n      const intervalBounceTopBody1 = setInterval(\r\n        moveBallSouthEast,\r\n        setIntervalNumberMs\r\n      )\r\n      intervalIds.push(intervalBounceTopBody1)\r\n    } else if (ballCurrentDirection === 'left') {\r\n      clearAllInterval()\r\n      const intervalBounceTopBody2 = setInterval(\r\n        moveBallSouthWest,\r\n        setIntervalNumberMs\r\n      )\r\n      intervalIds.push(intervalBounceTopBody2)\r\n    }\r\n  } else if (ballSizeAndPosition.bottom >= bodySizeAndPosition.bottom) {\r\n    if (ballCurrentDirection === 'right') {\r\n      clearAllInterval()\r\n      const intervalBounceBottomBody1 = setInterval(\r\n        moveBallNorthEast,\r\n        setIntervalNumberMs\r\n      )\r\n      intervalIds.push(intervalBounceBottomBody1)\r\n    } else if (ballCurrentDirection === 'left') {\r\n      clearAllInterval()\r\n      const intervalBounceBottomBody2 = setInterval(\r\n        moveBallNorthWest,\r\n        setIntervalNumberMs\r\n      )\r\n      intervalIds.push(intervalBounceBottomBody2)\r\n    }\r\n  } else if (\r\n    ballSizeAndPosition.right >= computerSizeAndPosition.left &&\r\n    ballCenterY >= computerSizeAndPosition.y &&\r\n    ballCenterY <= computerSizeAndPosition.bottom\r\n  ) {\r\n    isBallHitByComputer = true\r\n    isBallHitByPlayer = false\r\n    ballCurrentDirection = 'left'\r\n    // console.log('Collided with computer bar')\r\n    increaseBallSpeed()\r\n    ballBounceFromComputer()\r\n  } else if (ballSizeAndPosition.left <= bodySizeAndPosition.left) {\r\n    computerScoreNum += 1\r\n    updateScoreBoard()\r\n    generateBallAtRandomY()\r\n  } else if (ballSizeAndPosition.right >= bodySizeAndPosition.right) {\r\n    playerScoreNum += 1\r\n    updateScoreBoard()\r\n    generateBallAtRandomY()\r\n  }\r\n}\r\n\r\nfunction updateScoreBoard() {\r\n  playerScore.textContent = playerScoreNum.toString()\r\n  computerScore.textContent = computerScoreNum.toString()\r\n\r\n  allPopupPlayerScores.forEach((playerElement) => {\r\n    playerElement.textContent = playerScoreNum.toString()\r\n  })\r\n\r\n  allPopupComputerScores.forEach((computerElement) => {\r\n    computerElement.textContent = computerScoreNum.toString()\r\n  })\r\n\r\n  if (isInfiniteMode === false) {\r\n    checkPlayerWin()\r\n  }\r\n}\r\n\r\nfunction ballBounceFromPlayer() {\r\n  clearAllInterval()\r\n\r\n  // console.log('bouncing')\r\n  if (ballCenterY < playerBarCenterY) {\r\n    const intervalBouncePlayer1 = setInterval(\r\n      moveBallNorthEast,\r\n      setIntervalNumberMs\r\n    )\r\n    intervalIds.push(intervalBouncePlayer1)\r\n    // console.log('move ball north east')\r\n  } else if (ballCenterY > playerBarCenterY) {\r\n    const intervalBouncePlayer2 = setInterval(\r\n      moveBallSouthEast,\r\n      setIntervalNumberMs\r\n    )\r\n    intervalIds.push(intervalBouncePlayer2)\r\n    // console.log('move ball south east')\r\n  } else if (ballCenterY === playerBarCenterY) {\r\n    const intervalBouncePlayer3 = setInterval(moveBallEast, setIntervalNumberMs)\r\n    intervalIds.push(intervalBouncePlayer3)\r\n    // console.log('move ball east')\r\n  }\r\n}\r\n\r\nfunction ballBounceFromComputer() {\r\n  clearAllInterval()\r\n  // console.log('bouncing')\r\n\r\n  if (ballCenterY < computerBarCenterY) {\r\n    const intervalBounceComputer1 = setInterval(\r\n      moveBallNorthWest,\r\n      setIntervalNumberMs\r\n    )\r\n    intervalIds.push(intervalBounceComputer1)\r\n  } else if (ballCenterY > computerBarCenterY) {\r\n    const intervalBounceComputer2 = setInterval(\r\n      moveBallSouthWest,\r\n      setIntervalNumberMs\r\n    )\r\n    intervalIds.push(intervalBounceComputer2)\r\n  } else if (ballCenterY === computerBarCenterY) {\r\n    const intervalBounceComputer3 = setInterval(\r\n      moveBallWest,\r\n      setIntervalNumberMs\r\n    )\r\n    intervalIds.push(intervalBounceComputer3)\r\n  }\r\n}\r\n\r\nfunction clearAllInterval() {\r\n  intervalIds.forEach((interval) => {\r\n    clearInterval(interval)\r\n  })\r\n\r\n  intervalIds.splice(0, intervalIds.length)\r\n\r\n  // console.log(intervalIds)\r\n}\r\n\r\nfunction moveComputerBar() {\r\n  updateBallPosition()\r\n  updateComputerBarPosition()\r\n  // console.log(timeoutIds)\r\n\r\n  if (ballCenterY < computerBarCenterY) {\r\n    moveTimeoutComputerNorth = setTimeout(\r\n      moveComputerBarNorth,\r\n      setTimeoutComputer\r\n    )\r\n\r\n    timeoutIds.push(moveTimeoutComputerNorth)\r\n    // console.log(computerSizeAndPosition.y)\r\n    // console.log('computer bar moving top')\r\n  } else if (ballCenterY > computerBarCenterY) {\r\n    moveTimeoutComputerSouth = setTimeout(\r\n      moveComputerBarSouth,\r\n      setTimeoutComputer\r\n    )\r\n    timeoutIds.push(moveTimeoutComputerSouth)\r\n\r\n    // console.log(computerSizeAndPosition.y)\r\n    // console.log('computer bar moving bottom')\r\n  } else {\r\n    clearAllTimeout()\r\n  }\r\n}\r\n\r\nfunction moveComputerBarNorth() {\r\n  updateComputerBarPosition()\r\n  computerBar.style.top =\r\n    (computerSizeAndPosition.y - pxDistanceComputerMove).toString() + 'px'\r\n}\r\nfunction moveComputerBarSouth() {\r\n  updateComputerBarPosition()\r\n  computerBar.style.top =\r\n    (computerSizeAndPosition.y + pxDistanceComputerMove).toString() + 'px'\r\n}\r\n\r\nfunction clearAllTimeout() {\r\n  timeoutIds.forEach((timeout) => {\r\n    clearTimeout(timeout)\r\n  })\r\n\r\n  timeoutIds.splice(0, timeoutIds.length)\r\n}\r\n\r\nfunction updateComputerBarPosition() {\r\n  computerSizeAndPosition = computerBar.getBoundingClientRect()\r\n\r\n  computerBarCenterX =\r\n    computerSizeAndPosition.x + computerSizeAndPosition.width / 2\r\n  computerBarCenterY =\r\n    computerSizeAndPosition.y + computerSizeAndPosition.height / 2\r\n}\r\n\r\nfunction increaseBallSpeed() {\r\n  pxDistanceBallMove += 0.5\r\n  if (pxDistanceComputerMove < 8) {\r\n    pxDistanceComputerMove += 0.3\r\n  }\r\n}\r\n\r\nfunction checkPlayerWin() {\r\n  console.log(playerScoreNum, computerScoreNum)\r\n  if (playerScoreNum === numberOfRoundsToWin) {\r\n    isPlayerWin = true\r\n    stopAllMovement()\r\n    playerWinContainer.classList.add('active')\r\n    overlay.classList.add('active')\r\n    infiniteModeInput.disabled = true\r\n  } else if (computerScoreNum === numberOfRoundsToWin) {\r\n    console.log('computer wins')\r\n    isPlayerWin = false\r\n    stopAllMovement()\r\n    computerWinContainer.classList.add('active')\r\n    overlay.classList.add('active')\r\n    infiniteModeInput.disabled = true\r\n  }\r\n}\r\n\r\nfunction resetGameState() {\r\n  stopAllMovement()\r\n  ballCurrentDirection = undefined\r\n  isBallHitByPlayer = undefined\r\n  isBallHitByComputer = undefined\r\n\r\n  // distance and interval for ball\r\n  pxDistanceBallMove = 3\r\n  setIntervalNumberMs = 15\r\n\r\n  // distance and interval for computer bar\r\n  pxDistanceComputerMove = 6\r\n  setTimeoutComputer = 0.5\r\n\r\n  moveTimeoutComputerNorth = undefined\r\n  moveTimeoutComputerSouth = undefined\r\n\r\n  playerScoreNum = 0\r\n  computerScoreNum = 0\r\n\r\n  isPlayerWin = undefined\r\n\r\n  isInfiniteMode = false\r\n\r\n  updateScoreBoard()\r\n  updateInfiniteModeInputLabel()\r\n}\r\n\r\nfunction stopAllMovement() {\r\n  clearAllInterval()\r\n  clearAllTimeout()\r\n}\r\n\r\nfunction updateBodySizeAndPosition() {\r\n  bodySizeAndPosition = body.getBoundingClientRect()\r\n}\r\n\r\nfunction gameInit() {\r\n  generateBallAtRandomY()\r\n  moveBallFromStartingPosition()\r\n}\r\n\r\nfunction gameRestart() {\r\n  resetGameState()\r\n  generateBallAtRandomY()\r\n  moveBallFromStartingPosition()\r\n}\r\n\r\nfunction updateInfiniteModeInputLabel() {\r\n  infiniteModeInput.removeAttribute('disabled')\r\n  if (!isInfiniteMode) {\r\n    infiniteModeLabel.textContent = 'First to 5pts'\r\n    infiniteModeInput.checked = false\r\n  } else {\r\n    infiniteModeLabel.textContent = 'Infinite Mode'\r\n    infiniteModeInput.checked = true\r\n  }\r\n}\r\n"],"names":["ballCurrentDirection","moveTimeoutComputerNorth","moveTimeoutComputerSouth","playerScore","document","querySelector","computerScore","playerBar","computerBar","ball","body","bodySizeAndPosition","getBoundingClientRect","playerWinContainer","computerWinContainer","overlay","allPopupPlayerScores","querySelectorAll","allPopupComputerScores","allPlayAgainButton","allInfiniteModeButton","infiniteModeLabel","infiniteModeInput","playerSizeAndPosition","computerSizeAndPosition","playerBarCenterY","width","x","height","y","playerBarHitBoxX","computerBarCenterY","style","top","toString","ballSizeAndPosition","ballCenterY","pxDistanceBallMove","setIntervalNumberMs","pxDistanceComputerMove","setTimeoutComputer","playerScoreNum","computerScoreNum","isInfiniteMode","intervalIds","timeoutIds","generateBallAtRandomY","randomY","Math","floor","random","left","moveBallFromStartingPosition","updateBallPosition","randomTopOrBottom","startingPositionIntervalTop","setInterval","moveBallNorthWest","push","startingPositionIntervalBottom","moveBallSouthWest","moveComputerBar","ifBallCollideLogic","moveBallNorthEast","moveBallSouthEast","moveBallEast","moveBallWest","bottom","increaseBallSpeed","ballBounceFromPlayer","clearAllInterval","intervalBouncePlayer1","intervalBouncePlayer2","intervalBouncePlayer3","intervalBounceTopBody1","intervalBounceTopBody2","intervalBounceBottomBody1","intervalBounceBottomBody2","right","ballBounceFromComputer","intervalBounceComputer1","intervalBounceComputer2","intervalBounceComputer3","updateScoreBoard","textContent","forEach","playerElement","computerElement","console","log","stopAllMovement","classList","add","disabled","interval","clearInterval","splice","length","updateComputerBarPosition","setTimeout","moveComputerBarNorth","moveComputerBarSouth","clearAllTimeout","timeout","clearTimeout","gameRestart","undefined","updateInfiniteModeInputLabel","removeAttribute","checked","playAgainButton","addEventListener","event","remove","infiniteButton","target","mouseY","pageY"],"version":3,"file":"index.ed741662.js.map"}